
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://yjcdsudshecqgtvchhaj.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InlqY2RzdWRzaGVjcWd0dmNoaGFqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI1MzA1MDIsImV4cCI6MjA1ODEwNjUwMn0.cX9kV35mkCo8yYilMChBp4KYQ-0cHelC0c99kbvjypk";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
  }
});

// Helper function to check if bucket exists - avoids permission errors
export const ensureBucketExists = async (bucketName: string): Promise<boolean> => {
  try {
    const { data: buckets, error } = await supabase.storage.listBuckets();
    
    if (error) {
      console.error(`Error checking buckets:`, error);
      return false;
    }
    
    const bucketExists = buckets?.some(bucket => bucket.name === bucketName);
    
    if (!bucketExists) {
      // If bucket doesn't exist, try to create it based on bucket name
      if (bucketName === 'post_media' || bucketName === 'album_media') {
        try {
          console.log(`Attempting to initialize ${bucketName} bucket via Edge Function`);
          
          const response = await fetch(`${SUPABASE_URL}/functions/v1/create-media-bucket`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${SUPABASE_PUBLISHABLE_KEY}`
            },
            body: JSON.stringify({ bucket_name: bucketName })
          });
          
          if (response.ok) {
            console.log(`Successfully created ${bucketName} bucket`);
            return true;
          } else {
            console.error(`Failed to create ${bucketName} bucket:`, await response.text());
          }
        } catch (initError) {
          console.error(`Error initializing ${bucketName} bucket:`, initError);
        }
      }
    }
    
    return !!bucketExists;
  } catch (error) {
    console.error(`Error checking if bucket ${bucketName} exists:`, error);
    return false;
  }
};
